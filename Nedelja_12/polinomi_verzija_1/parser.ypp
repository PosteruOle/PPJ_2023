%{
    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include <vector>
    #include <map>

    using namespace std;

    #include "parser.tab.hpp"

    void yyerror(string s){
        cerr << s << "!\n";
        exit(EXIT_FAILURE);
    }

    map<string, vector<int>> table;

    void initialization(){ 

    }

    void deinitialization(){
        cout << "We will now deallocate all the heap memory that was used for storing polynomials!\n";
        for(auto it=table.begin();it!=table.end();it++){
            //delete &(*it).second;
        }   
    }

    extern int yylex();
%}

%union{
    int x;
    string *id;
    vector<int> *v;
}


%token ASSIGN EQ NEQ LEQ GEQ PRINTALL
%token<x> NUMBER
%token<id> ID 
%type<v> list_of_numbers poly 

%left '+' '-'
%left '*' '/'
%right UMINUS
%left '\''

%start program

%%

program: program command   { }
| command                  { }
;

command: poly '\n'         { 
    int n=$1->size();
    cout << "The size of our polynomial is equal to: " << n << ".\n";
    if(n==0){
        cout << "0\n";
    } else {
        for(int i=0;i<n;i++){
            if(i==n-1){
                cout << (*$1)[i] << endl;
                break;
            }
            if((*$1)[i]>=0)
                cout << (*$1)[i] << "*x^" << n-1-i << " + ";
            else
                cout << "(" << (*$1)[i] << ")" << "*x^" << n-1-i << " + ";     
        }
    }
}
| ID ASSIGN poly '\n'      { table[*$1]=*$3; }
| PRINTALL '\n'            { 
    for(auto it=table.begin();it!=table.end();it++){
        cout << (*it).first << " = \n\t";
        int n=(*it).second.size();
        if(n==0){
            cout << "0\n";
        } else {
            for(int i=0;i<n;i++){
                if(i==n-1){
                    cout << (*it).second[i] << endl;
                    break;
                }
                if((*it).second[i]>=0)
                    cout << (*it).second[i] << "*x^" << n-1-i << " + ";
                else
                    cout << "(" << (*it).second[i] << ")" << "*x^" << n-1-i << " + ";     
            }
        }    
    }
} 
| poly EQ poly '\n'        { 
    int n=$1->size();
    int m=$3->size();
    if(n!=m){
        cout << "False!\n";
    } else {
        bool flag=false;
        for(int i=0;i<n;i++){
            if((*$1)[i]!=(*$3)[i]){
                cout << "False!\n";
                flag=true;
                break;
            }
        }
        if(!flag)
            cout << "True!\n";
    }
}
| poly NEQ poly '\n'       { 
    int n=$1->size();
    int m=$3->size();
    if(n!=m){
        cout << "True!\n";
    } else {
        bool flag=false;
        for(int i=0;i<n;i++){
            if((*$1)[i]!=(*$3)[i]){
                cout << "True!\n";
                flag=true;
                break;
            }
        }
        if(!flag)
            cout << "False!\n";
    }
}
| poly '<' poly '\n'       { 
    int n=$1->size();
    int m=$3->size();
    if(n>m){
        cout << "False!\n";
    } else {
        bool flag=false;
        bool flag2=false;
        for(int i=0;i<n;i++){
            if((*$1)[i]>(*$3)[i]){
                cout << "False!\n";
                flag=true;
                break;
            }

            if((*$1)[i]<(*$3)[i]){
                flag2=true;
            }
        }
        if(!flag && !flag2)
            cout << "True!\n";
        else
            cout << "False!\n";    
    }
}
| poly '>' poly '\n' {
    int n=$1->size();
    int m=$3->size();
    if(n<m){
        cout << "False!\n";
    } else {
        bool flag=false;
        bool flag2=false;
        for(int i=0;i<n;i++){
            if((*$1)[i]<(*$3)[i]){
                cout << "False!\n";
                flag=true;
                break;
            }

            if((*$1)[i]>(*$3)[i]){
                flag2=true;
            }
        }
        if(!flag && !flag2)
            cout << "True!\n";
        else
            cout << "False!\n";
    }
}
| poly LEQ poly '\n'       { 
    int n=$1->size();
    int m=$3->size();
    if(n>m){
        cout << "False!\n";
    } else {
        bool flag=false;
        bool flag2=false;
        for(int i=0;i<n;i++){
            if((*$1)[i]>(*$3)[i]){
                cout << "False!\n";
                flag=true;
                break;
            }
        }
        if(!flag)
            cout << "True!\n";
    }
}
| poly GEQ poly '\n'       { 
    int n=$1->size();
    int m=$3->size();
    if(n<m){
        cout << "False!\n";
    } else {
        bool flag=false;
        bool flag2=false;
        for(int i=0;i<n;i++){
            if((*$1)[i]<(*$3)[i]){
                cout << "False!\n";
                flag=true;
                break;
            }
        }
        if(!flag)
            cout << "True!\n";
    }
}
| poly '[' NUMBER ']'      { 
    int n=$1->size();
    if($3<0 || $3>=n){
        cerr << "Index out of bound!\nYou won't find that quotient!\n";
        exit(EXIT_FAILURE);
    } else {
        cout << "You were looking for this quotient: " << (*$1)[$3] << endl;
    }
}
| '$' poly '|' NUMBER      { 
    $2->push_back(0);
    int n=$2->size();
    for(int i=0;i<n-1;i++){
        (*$2)[i]/=n-1-i;
    }
    cout << "We will now print the quotients of the current polynomial.\n";
    cout << "After that, we will try to compute the polynomial value in the given point!\n";
    if(n==0){
        cout << "0\n";
    } else {
        for(int i=0;i<n;i++){
            if(i==n-1){
                cout << (*$2)[i] << endl;
                break;
            }
            if((*$2)[i]>=0)
                cout << (*$2)[i] << "*x^" << n-1-i << " + ";
            else
                cout << "(" << (*$2)[i] << ")" << "*x^" << n-1-i << " + ";     
        }
    }
    int total_value=0;
    int p=1;
    for(int i=n-1;i>=0;i--){
        total_value+=p*(*$2)[i];
        p*=$4;
    }
    cout << "The value of the polynomial function in the given point is equal to: " << total_value << ".\n";
}
| '\n'                     { }
;

poly: poly '+' poly        { 
    $$=new vector<int>();
    int n=$1->size();
    int m=$1->size();
    int max;
    
    if(n>m){
        max=n;
    } else {
        max=m;
    }
    
    $$->resize(max);
    int i=n-1;
    int j=m-1;
    int k=max-1;
    while(i>=0 && j>=0){
        (*$$)[k]=(*$1)[i]+(*$3)[j];
        i--;
        j--;
        k--;
    }

    while(i>=0){
        (*$$)[k]=(*$1)[i];
        i--;
        k--;
    }

    while(j>=0){
        (*$$)[k]=(*$3)[j];
        j--;
        k--;
    }    
}
| poly '-' poly            { 
    $$=new vector<int>();
    int n=$1->size();
    int m=$1->size();
    int max;
    
    if(n>m){
        max=n;
    } else {
        max=m;
    }
    
    $$->resize(max);
    int i=n-1;
    int j=m-1;
    int k=max-1;
    while(i>=0 && j>=0){
        (*$$)[k]=(*$1)[i]-(*$3)[j];
        i--;
        j--;
        k--;
    }

    while(i>=0){
        (*$$)[k]=(*$1)[i];
        i--;
        k--;
    }

    while(j>=0){
        (*$$)[k]=-(*$3)[j];
        j--;
        k--;
    }
}
| poly '*' poly            { 
    int n=$1->size();
    int m=$3->size();
    $$=new vector<int>(n+m-1, 0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            (*$$)[i+j]=(*$1)[i]+(*$3)[j];
        }
    }
}
| poly '/' poly            { $$=$1; }
| '-' poly %prec UMINUS    { 
    $$=$2;
    int n=$2->size();
    for(int i=0;i<n;i++){
        (*$$)[i]*=-1;
    }
}
| '(' poly ')'             { $$=$2; }
| '<' list_of_numbers '>'  { $$=$2; }
| poly '\''                { 
    $1->pop_back();
    int n=$1->size();
    for(int i=0;i<n;i++){
        (*$1)[i]*=n-i;
    }
}
| ID                       { 
    if(table.find(*$1)==table.end()){
        cerr << "The variable has not been defined yet!\n";
        exit(EXIT_FAILURE);
    }
    $$=&table[*$1]; 
}
;

list_of_numbers: list_of_numbers ',' NUMBER { 
    $$=new vector<int>(*$1);
    $$->push_back($3);
}
| NUMBER  { 
    $$=new vector<int>(); 
    $$->push_back($1); 
}
;

%%

int main(int argc, char **argv){
    
    initialization();

    if(yyparse()==0){
        cout << "Everything is okay with inserted commands!\n";
    } else {
        cerr << "Sintax error!\n";
        exit(EXIT_FAILURE);
    }

    deinitialization();

    return 0;
}