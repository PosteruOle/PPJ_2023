/* Napisati parser za jednostavni kalkulator koji podrzava rad sa promenljivama. 
 * Tokom parsiranja, parser treba da izgradi reprezentaciju uz pomoc sintaksnog stabla.
 * Na osnovu generisanog stabla, program moze da uradi sledece:
 * 1. Rezim interpretacije - tj. da izvrsi kompletan program obilaskom stabla.
 * 2. Rezim generisanja medjukoda - tj. da obilaskom stabla izgenerise reprezentaciju na
 *                                  na nekom zamisljenom medju jeziku. 
 * 
 * Da biste mogli da ispratite ovaj primer, preduslovi su sledeci:
 * 1. Razumete smisao prevodjenja programskih jezika.
 * 2. Razumete ulogu leksickog analizatora u prevodjenju jeziku.
 * 3. Razumete ulogu sintaksnog analizatora u prevodjenju jezika.
 * 4. Razumete odnos izmedju leksera i parsera. 
 * 5. Umete da napisete interaktivni parser pomocu flex/bison.
 * 6. Razumete osnove OOP-a u C++.
 * 7. Razumete nasledjivanje u C++.
 * 8. Razumete nacin na koji se radi LR parsiranje. 
 *
 * Dok ne ispunite sve preduslove, nemojte dzabe da gledate primer. Naucicete ga napamet, 
 * a to nicemu ne vodi. 
 *
 * Cilj primera je da program koji smo napisali u nasem zamisljenom jeziku (kalkulator), predstavimo
 * na apstraktni nacin koji ne zavisi od parsera, niti od ciljane arhitekture. Jedan nacin da to postignemo
 * je da na osnovu tog opisanog programa izgradimo stablo izracunavanja ili drugim recima sintaksno stablo.
 * Izvrsavanja naseg programa ekvivalentno je obilasku izgradjenog stabla. Kroz taj obilazak mozemo da 
 * izvrsimo program, odnosno da ga interpretiramo ili da izgenerisemo medjukod koji ce kasnije biti 
 * kompajliran, tj. preveden na odgovarajuci skup instrukcija izabrane arhitekture.
 * 
 * LR parsiranje je bottom-up, tj. od tokena nizom redukcija zelimo da dodjemo do startnog simbola 
 * gramatike. U praksi, ovo znaci da stablo sintakse naseg programa izgradjujemo od listova prema korenu,
 * tj. u suprotnom smeru u odnosu na uobicajeni nacin izgradnje koji znate sa elementarnih kurseva 
 * programiranja. Dodatno, treba voditi racuna da je u opstem slucaju, sintaksno stablo n-arno.
 *
 * Da bismo izgenerisali stablo sintakse postoji nekoliko opstih mesta:
 * 1. Nase stablo je sacinjeno od cvorova. Dakle, u korenu hijerarhije treba nam apstraktna klasa koja predstavlja
 *    cvor stabla u opstem slucaju. Klasa treba da ima javni interfejs koji na primer ima sledece funkcije: Izvrsi(), 
 *    Kompajliraj(), Odsampaj() itd.
 * 2. Svakom tipu naredbi dodeljujemo poseban tip cvora, tj. izvedenu klasu. Kao arugmente klase treba da cuvamo
 *    one podatke ili naredbe od kojih zavisi tekuci cvor.
 * 3. Srodne tipove naredbi treba da apstrahujemo u odgovarajuce nadklase. Na primer, sve binarne operacije mozemo
 *    da predstavimo apstraktnom klasom BinarniOperator iz koje cemo izvesti sve konkretne binarne operatore.
 * 4. U akcijama gramatike, treba samo da kreiramo odgovarajuce tipove cvorova.
 * 5. Izvrsavanje naseg programa zavisi od definisanih promenljivih, tj. okoline u kojoj se nas program nalazi. 
 *
 * Kao i uvek, prvo pisemo gramatiku i zatim je obogacujemo akcijama i izgradnjom stabla.
 * 
 */
%{
    #include <iostream>
    #include <cstdlib>
    #include <map>
    #include <string.h>
    /* Pomocni tipovi podataka neophodni za generisanje stabla */
    #include "SymbolTable.hpp"
    #include "SyntaxTree.hpp"

    /* linkujemo lekser */
    extern int yylex();

    /* funkcija za obradu gresaka */
    void yyerror(std::string s) {
        std::cerr << "Greska: " << s << std::endl;
        exit(EXIT_FAILURE);
    }    

    /* flag kojim definisemo sta radimo nakon parsiranja programa */
    bool compile = false;
    /* tabela simbola */
    SymbolTable st;
    /* koreni cvor stabla */
    SyntaxTreeNode* syntaxTree = nullptr;
%}

/* tipovi podataka */
%union {
    double d;
    std::string* s;
    SyntaxTreeNode* node;
}

/* definicija prioriteta */
%left '+' '-'
%left '*' '/'
%right UMINUS

/* tokeni i tipovi */
%token DEF_T EQ_T NEQ_T LEQ_T GEQ_T PRINT_T
%token<s> ID_T
%token<d> BROJ_T

/* Svi tipovi naredbi su tipa SyntaxTreeNode*. Dinamicko vezivanje, tj. polimorfizam, 
 * ce osigurati da se svi tipovi naredbi adekvatno izvrsavaju.
 */
%type<node> izraz logicka_naredba naredba niz_naredbi

/* startni simbol */
%start program

%%
program: niz_naredbi                    {   
                                            /* u zavisnosti od izabrane opcije 
                                             * izvrsavamo ili interpretaciju programa 
                                             * ili kompilaciju
                                             */
                                            if (compile)
                                                $1->Compile(st); 
                                            else 
                                                $1->Interpret(st);

                                            /* pamtimo pokazivac na koren stabla */
                                            syntaxTree = $1;
                                        }
    ;
niz_naredbi: niz_naredbi naredba        {  
                                            /* pokazivac pretvaramo u ispravan objekat */
                                            StatementSequenceNode* ss = dynamic_cast<StatementSequenceNode*>($1);
                                            /* dodajemo podstablo u cvor */
                                            ss->Add($2); 
                                            /* i kao rezultat naredbe postavljamo generisani cvor */
                                            $$ = ss;
                                        }
    | naredba                           { 
                                            /* kreiramo novi cvor */
                                            StatementSequenceNode* ss = new StatementSequenceNode();
                                            /* dodajemo podstablo u cvor */
                                            ss->Add($1);
                                            /* i kao rezultat naredbe postavljamo generisani cvor */
                                            $$ = ss;
                                        }
    ;
/* u svim naredbama kao akciju imamo kreiranje odgovarajuceg tipa stabla 
 * BITNO:
 * Primetite da se izvrsavanje koda odlaze sve do momenta dok ne izvedemo startni simbol
 */
naredba: DEF_T ID_T '=' izraz ';'       { $$ = new AssignmentNode(*$2, $4); delete $2;}
    | PRINT_T '(' izraz ')' ';'         { $$ = new PrintNode($3);}
    | ID_T '=' izraz ';'                { $$ = new AssignmentNode(*$1, $3); delete $1; }
    | logicka_naredba ';'               { 
                                            /* u naredbama u kojima nema transformacija ulaza, 
                                             * nema potrebe da kreiramo nove cvorove, vec mozemo samo
                                             * da propagiramo postojece uz stablo
                                             */
                                            $$ = $1;
                                        }
    ;
logicka_naredba: izraz EQ_T izraz       { $$ = new LogicalNode("==", $1, $3);} 
    | izraz NEQ_T izraz                 { $$ = new LogicalNode("!=", $1, $3);}
    | izraz LEQ_T izraz                 { $$ = new LogicalNode("<=", $1, $3);}
    | izraz GEQ_T izraz                 { $$ = new LogicalNode(">=", $1, $3);}
    | izraz '<' izraz                   { $$ = new LogicalNode("<", $1, $3);}
    | izraz '>' izraz                   { $$ = new LogicalNode(">", $1, $3); }
    ;
izraz: izraz '+' izraz                  { $$ = new PlusNode("+", $1, $3); }
    | izraz '-' izraz                   { $$ = new MinusNode("-", $1, $3); }
    | izraz '*' izraz                   { $$ = new TimesNode("*",$1, $3);}
    | izraz '/' izraz                   { $$ = new DivisionNode("/",$1, $3); }
    | '-' izraz %prec UMINUS            { $$ = new UMinusNode("uminus", $2); }
    | '(' izraz ')'                     { 
                                            /* u naredbama u kojima nema transformacija ulaza, 
                                             * nema potrebe da kreiramo nove cvorove, vec mozemo samo
                                             * da propagiramo postojece uz stablo
                                             */
                                            $$ = $2; 
                                        }
    | ID_T                              { $$ = new IdentifierNode(*$1); delete $1; }
    | BROJ_T                            { $$ = new ConstantNode($1); }
    ;

%%

/* definicija glavnog programa */
int main(int argc, char** argv) {

    /* provera argumenata */
    if (argc > 1) {
        if (strcmp(argv[1], "-c") == 0) {
            compile = true;
        }
        else if (strcmp(argv[1], "-i") == 0) {
            compile = false;
        }
        else {
            yyerror("Wrong opt");
        }
    }

    /* pokrecemo parsiranje i izgradnju sintaksnog stabla */
    if (yyparse() == 0) {
        std::cout << "Sve ok" << std::endl;
    }
    else {
        std::cout << "Sintaksna greska" << std::endl;
    }

    /* prikazujemo generisano sintaksno stablo */
    std::cout << (*syntaxTree) << std::endl;
    /* unistavamo generisano sintaktsno stablo */
    delete syntaxTree;

    exit(EXIT_SUCCESS);
}