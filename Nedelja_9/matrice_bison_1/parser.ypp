%{
    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include <map>
    #include <vector>
    #define YYDEBUG 1

    using namespace std;

    #include "parser.tab.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << s << "!\n";
        exit(EXIT_FAILURE);
    }

    map<string, vector<vector<int>>*> tablica;
%}

%union{
    int x;
    string *id;
    vector<vector<int>>* m;
    vector<int> *v;
}

%token PKM DODELA PRINTALL
%token<x> BROJ
%token<id> ID
%type<m> matrica niz_vrsta
%type<v> vrsta

%left '+' '-'
%left '*' PKM
%right '\''

%%

program: naredba '\n' program { }
| naredba '\n'                { }
;

naredba: ID DODELA matrica    { 
    tablica[*$1]=$3;
    vector<vector<int>> matrix=*$3;
    int n=matrix.size();
    
    if(n==0){
        cerr << "Prazna matrica\n";
        exit(EXIT_FAILURE);
    }
    
    int m=matrix[0].size();
    cout << *$1 << " = \n\t";

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cout << matrix[i][j] << " ";
        }

        if(i==n-1){
            cout << "\n";
            break;
        }
        
        cout << "\n\t";
    }
}
| ID DODELA matrica ';'       { 
    tablica[*$1]=$3;
}
| matrica ';'                 { }
| matrica                     { 
    vector<vector<int>> matrix=*$1;
    int n=matrix.size();
    if(n==0){
        cerr << "Prazna matrica\n";
        exit(EXIT_FAILURE);
    }
    int m=matrix[0].size();

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cout << matrix[i][j] << " ";
        }

        cout << endl;
    }
}
| PRINTALL                    { 
    for(auto it=tablica.begin();it!=tablica.end();it++){
        cout << (*it).first << " = \n\t";
        vector<vector<int>> matrix=*(*it).second;
        int n=matrix.size();
        if(n==0){
            cerr << "Prazna matrica\n";
            exit(EXIT_FAILURE);
        }
        int m=matrix[0].size();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout << matrix[i][j] << " ";
            }

            if(i==n-1){
                cout << "\n";
                break;
            }

            cout << "\n\t";
        }
    }
}
| PRINTALL ';' { 
    for(auto it=tablica.begin();it!=tablica.end();it++){
        cout << (*it).first << " = \n\t";
        vector<vector<int>> matrix=*(*it).second;
        int n=matrix.size();
        if(n==0){
            cerr << "Prazna matrica\n";
            exit(EXIT_FAILURE);
        }
        int m=matrix[0].size();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                cout << matrix[i][j] << " ";
            }

            if(i==n-1){
                cout << "\n";
                break;
            }

            cout << "\n\t";
        }
    }
}
;

matrica: matrica '+' matrica  { 
    vector<vector<int>> m1=*$1;
    vector<vector<int>> m2=*$3;
    vector<vector<int>> result;
    int n=m1.size();
    int m=m1[0].size();

    if(n==0 || m==0){
        cerr << "Matrica nema jednu dimenziju!\n";
        exit(EXIT_FAILURE);
    }

    if(n!=m2.size() || m!=m2[0].size()){
        cerr << "Matrice nisu istih dimenzija!\n";
        exit(EXIT_FAILURE);
    }

    result.resize(n);
    for(int i=0;i<n;i++){
        result[i].resize(m);
    }

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            result[i][j]=m1[i][j]+m2[i][j];
        }
    }

    $$=new vector<vector<int>>(result);
}
| matrica '-' matrica         { 
    vector<vector<int>> m1=*$1;
    vector<vector<int>> m2=*$3;
    vector<vector<int>> result;
    int n=m1.size();
    int m=m1[0].size();
    if(n==0 || m==0){
        cerr << "Matrica nema jednu dimenziju!\n";
        exit(EXIT_FAILURE);
    }

    if(n!=m2.size() || m!=m2[0].size()){
        cerr << "Matrice nisu istih dimenzija!\n";
        exit(EXIT_FAILURE);
    }

    result.resize(n);
    for(int i=0;i<n;i++){
        result[i].resize(m);
    }


    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            result[i][j]=m1[i][j]-m2[i][j];
        }
    }

    $$=new vector<vector<int>>(result);
}
| matrica '*' matrica         { 
    vector<vector<int>> m1=*$1;
    vector<vector<int>> m2=*$3;
    vector<vector<int>> result;
    int n=m1.size();
    int m=m1[0].size();
    int l=m2.size();
    int k=m2[0].size();
    if(m!=l){
        cout << "Matrice nisu kompatibilnih dimenzija, te ih ne mozemo pomnoziti!\n";
        exit(EXIT_FAILURE);
    }
    
    result.resize(n);
    for(int i=0;i<n;i++){
        result[i].resize(k, 0);
    }

    for(int i=0;i<n;i++){
        vector<int> tmp_r=m1[0];
        for(int j=0;j<k;j++){
            vector<int> tmp_c;
            for(int it=0;it<m;it++){
                tmp_c.push_back(m2[it][j]);
            }
            int sum=0;
            for(int it=0;it<m;it++){
               sum+=tmp_r[it]*tmp_c[it];     
            }
            result[i][j]=sum;
        }
    }

    $$=new vector<vector<int>>(result);
}
| matrica PKM matrica         {
vector<vector<int>> m1=*$1;
    vector<vector<int>> m2=*$3;
    vector<vector<int>> result;
    int n=m1.size();
    int m=m1[0].size();
    if(n==0 || m==0){
        cerr << "Matrica nema jednu dimenziju!\n";
        exit(EXIT_FAILURE);
    }

    if(n!=m2.size() || m!=m2[0].size()){
        cerr << "Matrice nisu istih dimenzija!\n";
        exit(EXIT_FAILURE);
    }

    result.resize(n);
    for(int i=0;i<n;i++){
        result[i].resize(m);
    }

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            result[i][j]=m1[i][j]*m2[i][j];
        }
    }

    // Naredna linija predstavlja lose resenje! Potrebno je kreirati novi objekat za neterminal matrica!
    //$$=&result;
    
    $$=new vector<vector<int>>(result);
}
| '(' matrica ')'             { 
    $$=$2;
}
| matrica '\''                { 
    vector<vector<int>> matrix=*$1;
    vector<vector<int>> result;
    int n=matrix.size();
    int m=matrix[0].size();
    result.resize(m);
    for(int i=0;i<m;i++){
        result[i].resize(n);
    }

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            result[j][i]=matrix[i][j];
        }
    }

    $$=new vector<vector<int>>(result);
}
| ID                          { 
    if(tablica.find(*$1)==tablica.end()){
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }

    $$=tablica[*$1];
}
| '[' niz_vrsta ']'           { 
    $$=$2;
}
;

niz_vrsta: niz_vrsta ';' vrsta {
    $$=$1;
    $$->push_back(*$3);
}
| vrsta                        { 
    $$=new vector<vector<int>>();
    $$->push_back(*$1);
}
;

vrsta: vrsta BROJ              { 
    $$=$1;
    $$->push_back($2);
}
| BROJ                         { 
    $$=new vector<int>();
    $$->push_back($1);
}
;

%%

int main(int argc, char **argv){
    
    //yydebug=1;

    if(yyparse()==0){
        cout << "Sve je u redu sa unetim matricnim operacijama!\n";
    } else {
        cerr << "Sintaksna greska!\n";
        exit(EXIT_FAILURE);
    }

    return 0;
}