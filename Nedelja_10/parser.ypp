%{
    #include <iostream>
    #include <cstdlib>
    #include <vector>
    #include <string>
    #include <map>
    #include "funkcije.hpp"

    using namespace std;

    #include "parser.tab.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << s << "!\n";
        exit(EXIT_FAILURE);
    }

    map<char, Funkcija*> tablica;

%}

%union{
    char c;
    double x;
    vector<char>* v1;
    vector<double>* v2;
    Izraz *i;
}

%token FUNCTION SIN COS PRINTALL
%token<c> FID ID 
%token<x> BROJ
%type<v1> niz_argumenata
%type<v2> niz_brojeva
%type<i> E

%left '+'
%left '*'

%start program

%%

program: naredba '\n' program { }
| naredba  { }
;

naredba: FUNCTION FID '(' niz_argumenata ')' '=' '"' E '"' { 
    Funkcija *f=new Funkcija(*$4, $8);
    if(!f->proveri()){
        cerr << "Greska prilikom kreiranja funckije!\n";
        exit(EXIT_FAILURE);
    }
    tablica[$2]=f;
}
| FID                      { 
    if(tablica.find($1)==tablica.end()){
        cerr << "Funkcija nije definisana!\n";
        exit(EXIT_FAILURE);
    }
    tablica[$1]->ispisi();
}
| FID '[' niz_brojeva ']'  { 
    if(tablica.find($1)==tablica.end()){
        cerr << "Funkcija nije definisana!\n";
        exit(EXIT_FAILURE);
    }
    Funkcija *help=tablica[$1];
    cout << (*help)[*$3] << endl;
}
| FID '\'' ID              { 
    if(tablica.find($1)==tablica.end()){
        cerr << "Funkcija nije definisana! Ne mozemo izracunati izvod!\n";
        exit(EXIT_FAILURE);
    }
    tablica[$1]->izvod($3)->ispisi();
    cout << endl;
}
| PRINTALL                 { 
    for(auto it=tablica.begin();it!=tablica.end();it++){
        cout << it->first << "(";
        Funkcija *help=it->second;
        vector<char> arg=help->getArgumenti();
        for(int i=0;i<arg.size();i++){
            if(i==arg.size()-1){
                cout << arg[i] << ") = \n\t";
                break;
            }
            cout << arg[i] << ", ";
        }
        help->ispisi();
        cout << endl;
    }
}
|                          { }
;

niz_argumenata: niz_argumenata ',' ID { 
    $$=$1;
    $$->push_back($3);
}
| ID                                  {
    $$=new vector<char>();
    $$->push_back($1);
}
;

niz_brojeva: niz_brojeva ',' BROJ { 
    $$=$1;
    $$->push_back($3);
}
| BROJ                            { 
    $$=new vector<double>();
    $$->push_back($1);
} 
;

E: E '+' E       { 
    $$=new Zbir($1, $3);
}
| E '*' E        { 
    $$=new Proizvod($1, $3);
}
| '(' E ')'      { 
    $$=$2;
}
| SIN '(' E ')'  { 
    $$=new Sinus($3);
}
| COS '(' E ')'  { 
    $$=new Kosinus($3);
}
| BROJ           { 
    $$=new Konstanta($1);
}
| ID             { 
    $$=new Promenljiva($1);
}
;

%%

int main(){

    if(yyparse()==0){
        cout << "Sve je u redu sa unetim naredbama!\n";
    } else {
        cerr << "Sintaksna greska!\n";
        exit(EXIT_FAILURE);
    }

    cout << "Sada cemo obrisati kreirano apstraktno sintaksno stablo!\n";

    for(auto it: tablica){
        delete it.second;
    }

    cout << "Kreirano apstraktno sintaksno stablo je uspesno obrisano!\n";

    return 0;
}