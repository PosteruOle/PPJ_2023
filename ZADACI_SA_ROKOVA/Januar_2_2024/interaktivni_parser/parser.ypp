%{
  #include <iostream>
  #include <cstdlib>
  #include <string>
  #include <vector>
  #include <map>

  using namespace std;

  extern int yylex();

  void yyerror(string s){
    cerr << s << "!\n";
    exit(EXIT_FAILURE);
  }

  map<string, string> tablica;
%}

%union{
  string *id;  
}

%token START END STRING INPUT OUTPUT ERROR MM VV PRINT_ALL
%token<id> ID MESSAGE
%type<id> string

%left '+'
%left '*'
%right '~'

%start program

%%

program: START ':' blok END { }
;

blok: naredba ';' blok  { }
| naredba ';'           { }
;

naredba: STRING ID { 
  tablica[*$2]="";
} 
| STRING ID '=' string { 
  tablica[*$2]=*$4;
}
| OUTPUT MM string     {
  cout << *$3 << endl;
}
| ERROR MM string      { 
  cerr << *$3 << endl;
}
| INPUT VV ID          { 
  if(tablica.find(*$3)==tablica.end()){
    cerr << "Promenljiva nije definisana!\n";
    exit(EXIT_FAILURE);
  }
  string tmp;
  cin >> tmp;
  tablica[*$3]=tmp;
}
| ID '=' string        { 
  if(tablica.find(*$1)==tablica.end()){
    cerr << "Promenljiva nije definisana!\n";
    exit(EXIT_FAILURE);
  }
  tablica[*$1]=*$3;
}
| PRINT_ALL             { 
  for(auto pair: tablica){
    cout << pair.first << " = " << pair.second << endl;
  }
}
;

string: string '+' string  { 
  string tmp=*$1+*$3;
  $$=&tmp;
}
| string '*' string {
  string tmp1=*$1;
  string tmp2=*$3;
  string result="";
  int i=0;
  while(tmp1[i]==tmp2[i]){
    result+=tmp1[i];
    i++;
  }
  $$=&result;
}
| '(' string ')' { 
  $$=$2;
}
| '~' string {
  string tmp=*$2;
  string result="";
  int n=tmp.size();
  for(int i=n-1;i>=0;i--){
    result+=tmp[i];
  }
  $$=&result;
}
| MESSAGE { 
  string tmp=*$1;
  tmp=tmp.substr(1, tmp.size()-2);
  $$=&tmp;
}
| ID { 
  if(tablica.find(*$1)==tablica.end()){
    cerr << "Promenljiva nije definisana!\n";
    exit(EXIT_FAILURE);
  }
  $$=&tablica[*$1];
} 
;

%%

int main(int argc, char **argv){

  if(yyparse()==0){
    cout << "Sve je u redu sa unetim naredbama!\n";
  } else {
    cerr << "Sintaksna greska!\n";
    exit(EXIT_FAILURE);
  }

  return 0;
}
