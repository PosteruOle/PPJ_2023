%{
    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include <vector>
    #include <stack>
    #include <queue>
    #include <deque>
    #include <algorithm>
    #include <map>

    using namespace std;

    extern int yylex();

    void yyerror(string s){
        cerr << s << "!\n";
        exit(EXIT_FAILURE);
    }

    map<string, deque<int>*> tablica_stekova;
    map<string, deque<int>*> tablica_redova;
%}

%union{
    int x;
    string *id;
    deque<int>* d;
}

%token STACK QUEUE PRINT_QUEUE PRINT_STACK INT DODELA NEQ EQ PUSH POP PEEK SIZE
%token<id> ID
%token<x> BROJ
%type<d> izraz lista_brojeva

%left '+' 
%right '-'

%start program

%%

program: naredba ';' program  { }
| naredba ';'                 { }
;

naredba: STACK '<' INT '>' ID DODELA izraz { 
    tablica_stekova[*$5]=$7;
}
| QUEUE '<' INT '>' ID DODELA izraz { 
    tablica_redova[*$5]=$7;
}
| STACK '<' INT '>' ID       { 
    tablica_stekova[*$5]=new deque<int>();
}
| QUEUE '<' INT '>' ID              { 
    tablica_redova[*$5]=new deque<int>();
}
| PRINT_STACK '(' ID ')'            { 
    if(tablica_stekova.find(*$3)==tablica_stekova.end()){
        cerr << "Promenljiva nije definisana kao stek!\n";
        exit(EXIT_FAILURE);
    }
    deque<int> elements=*tablica_stekova[*$3];
    cout << "[";
    for(int i=0;i<elements.size();i++){
        if(i==elements.size()-1){
            cout << elements[i];
            break;
        }
        cout << elements[i] << ", ";
    }
    cout << "]\n";
}
| PRINT_QUEUE '(' ID ')'            { 
    if(tablica_redova.find(*$3)==tablica_redova.end()){
        cerr << "Promenljiva nije definisana kao red!\n";
        exit(EXIT_FAILURE);
    }
    deque<int> elements=*tablica_redova[*$3];
    cout << "[";
    for(int i=0;i<elements.size();i++){
        if(i==elements.size()-1){
            cout << elements[i];
            break;
        }
        cout << elements[i] << ", ";
    }
    cout << "]\n";
}
| ID DODELA izraz                   { 
    if(tablica_redova.find(*$1)!=tablica_redova.end()){
        tablica_redova[*$1]=$3;
    } else if(tablica_stekova.find(*$1)!=tablica_stekova.end()){
        tablica_stekova[*$1]=$3;
    } else {
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }
}
| ID '.' PUSH '(' BROJ ')'          { 
    if(tablica_redova.find(*$1)!=tablica_redova.end()){
        tablica_redova[*$1]->push_front($5);
    } else if(tablica_stekova.find(*$1)!=tablica_stekova.end()){
        tablica_stekova[*$1]->push_back($5);
    } else {
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }
}
| ID '.' POP '(' ')'                { 
    if(tablica_redova.find(*$1)!=tablica_redova.end()){
        tablica_redova[*$1]->pop_front();
    } else if(tablica_stekova.find(*$1)!=tablica_stekova.end()){
        tablica_stekova[*$1]->pop_back();
    } else {
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }
}
| ID '.' SIZE '(' ')'               { 
    if(tablica_redova.find(*$1)!=tablica_redova.end()){
        cout << tablica_redova[*$1]->size() << endl;
    } else if(tablica_stekova.find(*$1)!=tablica_stekova.end()){
        cout << tablica_stekova[*$1]->size() << endl;
    } else {
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }
}
| ID '.' PEEK '(' ')'               { 
    if(tablica_redova.find(*$1)!=tablica_redova.end()){
        cout << (*tablica_redova[*$1])[0] << endl;
    } else if(tablica_stekova.find(*$1)!=tablica_stekova.end()){
        cout << (*tablica_stekova[*$1])[tablica_stekova[*$1]->size()-1] << endl;
    } else {
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }
}
| izraz EQ izraz                    { 
    //TODO!
}
| izraz NEQ izraz                   { 
    //TODO!
}
;

izraz: izraz '+' izraz { 
    deque<int> *result=new deque<int>();
    for(int x: *$1){
        result->push_back(x);
    }
    for(int x: *$3){
        result->push_back(x);
    }
    $$=result;
}
| '(' izraz ')'        { 
    $$=$2;
}
| '-' izraz            { 
    $$=$2;
    reverse($$->begin(), $$->end());
}
|'{' lista_brojeva '}' { 
    $$=$2;
}
| ID                   { 
    if(tablica_redova.find(*$1)==tablica_redova.end() && tablica_stekova.find(*$1)==tablica_stekova.end()){
        cerr << "Promenljiva nije definisana!\n";
        exit(EXIT_FAILURE);
    }

}
;

lista_brojeva: lista_brojeva ',' BROJ { 
    $$=$1;
    $$->push_back($3);
}
| BROJ                                { 
    $$=new deque<int>();
    $$->push_back($1);
}
;

%%

int main(){

    if(yyparse()==0){
        cout << "Sve je u redu sa unetim naredbama!\n";
    } else {
        cerr << "Sintkansa greska!\n";
        exit(EXIT_FAILURE);
    }

    return 0;
}